
**1. –û—Å–Ω–æ–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –≤ Rust**
–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º ‚Äî —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á *–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ*. –í Rust —ç—Ç–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é:
- **–ü–æ—Ç–æ–∫–æ–≤ (threads)** ‚Äî –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ "–ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å—ã", –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
- **–ö–∞–Ω–∞–ª–æ–≤ (channels)** ‚Äî –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏.
- **–ú—å—é—Ç–µ–∫—Å–æ–≤ (Mutex)** ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º.

Rust –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ—à–∏–±–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö, deadlock) –±—É–¥—É—Ç –ø–æ–π–º–∞–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –∞ –Ω–µ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ.

---

## **2. –ü–æ—Ç–æ–∫–∏ (Threads)**
–ü–æ—Ç–æ–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ. –í Rust –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å **1:1** (–æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –û–° –Ω–∞ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ Rust).

### **–ü—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞**
```rust
use std::thread;
use std::time::Duration;

fn main() {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    let handle = thread::spawn(|| {
        for i in 1..5 {
            println!("–ü–æ—Ç–æ–∫: {}", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    // –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    for i in 1..3 {
        println!("–ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫: {}", i);
        thread::sleep(Duration::from_millis(1));
    }

    // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    handle.join().unwrap();
}
```
**–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?**
1. `thread::spawn` —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫.
2. –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –¥–æ—á–µ—Ä–Ω–∏–π –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
3. `handle.join()` –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ –¥–æ—á–µ—Ä–Ω–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.

**–û—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤:**
- –ï—Å–ª–∏ –Ω–µ –≤—ã–∑–≤–∞—Ç—å `join()`, –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ, –∏ –¥–æ—á–µ—Ä–Ω–∏–π –ø–æ—Ç–æ–∫ –Ω–µ —É—Å–ø–µ–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è.
- –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ `move`, –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –≤–ª–∞–¥–µ–Ω–∏—è.

---

## **3. –ö–∞–Ω–∞–ª—ã (Channels)**
–ö–∞–Ω–∞–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ—Ç–æ–∫–∞–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏. –í Rust –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **MPSC** (Multiple Producer, Single Consumer).

### **–ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**
```rust
use std::sync::mpsc;
use std::thread;

fn main() {
    // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
    let (tx, rx) = mpsc::channel();

    // –ü–µ—Ä–µ–¥–∞—ë–º tx –≤ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    thread::spawn(move || {
        let msg = String::from("–ü—Ä–∏–≤–µ—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞!");
        tx.send(msg).unwrap(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    let received = rx.recv().unwrap();
    println!("–ü–æ–ª—É—á–µ–Ω–æ: {}", received);
}
```
**–ß—Ç–æ –≤–∞–∂–Ω–æ?**
- `send()` –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (`msg` –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏).
- `recv()` –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
- `try_recv()` –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è).

---

## **4. –ú—å—é—Ç–µ–∫—Å—ã (Mutex)**
–ú—å—é—Ç–µ–∫—Å (`Mutex<T>`) –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤.

### **–ü—Ä–∏–º–µ—Ä: –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫**
```rust
use std::sync::{Arc, Mutex};
use std::thread;

fn main() {
    let counter = Arc::new(Mutex::new(0)); // –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();
            *num += 1; // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("–ò—Ç–æ–≥: {}", *counter.lock().unwrap());
}
```
**–ü–æ—á–µ–º—É `Arc`?**
- `Rc` –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç `Send`).
- `Arc` (Atomic Reference Counting) ‚Äî –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–æ–≥ `Rc`.

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `Mutex`?**
1. `lock()` –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç —Ä–∞–±–æ—Ç—É.
2. –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –æ–Ω –±—É–¥–µ—Ç –∂–¥–∞—Ç—å.
3. `Drop` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –º—å—é—Ç–µ–∫—Å.

---

## **5. –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–¥–∞—á–∏**
### **–ó–∞–¥–∞—á–∞ 1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥**
–°–æ–∑–¥–∞–π 3 –ø–æ—Ç–æ–∫–∞, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5 —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π `Duration::from_millis(100)`.

### **–ó–∞–¥–∞—á–∞ 2. –°—É–º–º–∞ –º–∞—Å—Å–∏–≤–∞**
–†–∞–∑–¥–µ–ª–∏ –º–∞—Å—Å–∏–≤ `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –∏ –≤—ã—á–∏—Å–ª–∏ —Å—É–º–º—É –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∑–∞—Ç–µ–º —Å–ª–æ–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

### **–ó–∞–¥–∞—á–∞ 3. –ß–∞—Ç –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö**
–°–æ–∑–¥–∞–π –¥–≤–∞ –ø–æ—Ç–æ–∫–∞:
- –ü–µ—Ä–≤—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è `"A", "B", "C"` —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫.
- –í—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∏—Ö.

---

## **6. –û—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å**
1. **–ì–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö** ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π `Mutex` –∏–ª–∏ –∫–∞–Ω–∞–ª—ã.
2. **Deadlock** ‚Üí –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π –º—å—é—Ç–µ–∫—Å.
3. **–£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏** ‚Üí –°–ª–µ–¥–∏ –∑–∞ `Arc` –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.

---

## **7. –î–∞–ª—å–Ω–µ–π—à–µ–µ –∏–∑—É—á–µ–Ω–∏–µ**
- **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** (`async/await`).
- **–ö—Ä–µ—Å—Ç—ã (Rayon)** ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤.
- **Tokio** ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–∞–Ω—Ç–∞–π–º.

---

### **–ò—Ç–æ–≥**
- –ü–æ—Ç–æ–∫–∏ (`thread::spawn`) –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
- –ö–∞–Ω–∞–ª—ã (`mpsc`) –ø–µ—Ä–µ–¥–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏.
- –ú—å—é—Ç–µ–∫—Å—ã (`Mutex + Arc`) –∑–∞—â–∏—â–∞—é—Ç –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
- Rust –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.

–ü–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ! üöÄ